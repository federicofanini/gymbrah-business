generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model user {
  id         String  @id @unique @default(uuid())
  email      String  @unique
  full_name  String
  avatar_url String?

  paid Boolean @default(false)
  role String  @default("athlete")

  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  workouts       workout[]
  feedback       feedback[]
  gamification   gamification?
  completed_sets completed_set[]
}

// Represents a subscription plan associated with a user.
// user can be business or athlete
model plan {
  id      String @id @default(uuid())
  user_id String

  stripe_customer_id     String
  stripe_subscription_id String
  stripe_price_id        String
  plan_name              String
  subscription_status    Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id])
}

model business {
  id      String @id @default(uuid())
  user_id String

  name     String // name of the business
  address  String // address of the business
  city     String // city of the business
  province String // province of the business
  zip      String // zip code of the business
  country  String // country of the business
  vat      String // vat number of the business (invoice)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id])
}

// code for the business to invite athletes
// unique business identifier, user friendly respect to user id (unique)
model business_code {
  id          String @id @default(uuid())
  code        String @unique
  business_id String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([business_id])
}

model athlete {
  id      String  @id @default(uuid())
  user_id String?

  athlete_code String  @unique // Unique athlete identifier 6 digits (e.g. 12ABC3)
  invited_by   String? // Gym that registered the athlete
  email        String  @unique // Stored for invitation process
  phone        String? // Optional for SMS invite
  name         String
  surname      String

  birth_date DateTime
  gender     String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id])
  @@index([athlete_code])
}

// table to map business client to athlete
model client_athlete {
  id          String @id @default(uuid())
  athlete_id  String
  business_id String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([athlete_id])
  @@index([business_id])
}

model business_client_subscription {
  id                String @id @default(uuid())
  client_athlete_id String
  business_id       String

  sub_type     String // e.g. "monthly", "yearly"
  price        Float
  payment_date DateTime // date of payment (when the subscription was created)
  renewal_date DateTime // date of renewal (when the subscription will be renewed)
  months_paid  String // e.g. "1,2" to count how many months have been paid

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([client_athlete_id])
  @@index([business_id])
}

model waitlist {
  id         String   @id @default(uuid())
  email      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model feedback {
  id         String   @id @default(uuid())
  user_id    String
  user       user     @relation(fields: [user_id], references: [id])
  message    String   @db.Text
  rating     Int // 1-5 rating scale
  category   String // e.g. "bug", "feature-request", "general"
  status     String   @default("pending") // e.g. "pending", "in-review", "resolved"
  upvotes    Int      @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id])
}

model workout_exercise {
  id          String    @id @default(uuid())
  exercise_id String
  exercise    exercises @relation(fields: [exercise_id], references: [id])

  reps     Int?
  sets     Int?
  weight   Float?
  duration Int?
  round    String?

  workout_id String
  workout    workout @relation(fields: [workout_id], references: [id])

  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  completed_sets completed_set[]

  @@index([exercise_id])
  @@index([workout_id])
}

model workout {
  id      String @id @default(uuid())
  name    String
  user_id String
  user    user   @relation(fields: [user_id], references: [id])

  business_id String? // business id of the workout (business that created the workout)
  athlete_id  String? // athlete id of the workout (athlete that completed the workout)

  exercises  workout_exercise[]
  created_at DateTime           @default(now())
  updated_at DateTime           @updatedAt

  @@index([user_id])
  @@index([business_id])
  @@index([athlete_id])
}

model workout_athlete {
  id          String  @id @default(uuid())
  workout_id  String
  athlete_id  String // athlete id of the workout (athlete that workout has been assigned to)
  business_id String? // business id of the workout (business that created the workout)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([workout_id])
  @@index([athlete_id])
  @@index([business_id])
}

model exercises {
  id                String   @id @unique
  name              String?
  body_part         String?
  equipment         String?
  gif_url           String?
  target            String?
  secondary_muscles String[]
  instructions      String[]
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  workout_exercise workout_exercise[]

  @@index([body_part])
  @@index([target])
  @@index([equipment])
}

model gamification {
  id                 String    @id @default(uuid())
  user_id            String    @unique
  user               user      @relation(fields: [user_id], references: [id])
  points             Int       @default(0)
  level              Int       @default(1)
  streak_days        Int       @default(0)
  longest_streak     Int       @default(0)
  workouts_completed Int       @default(0)
  total_sets         Int       @default(0) // Track total sets for SET_COMPLETION points
  achievements       String[]  @default([]) // Achievement IDs from ACHIEVEMENTS constant
  badges             String[]  @default([]) // Badge IDs from ACHIEVEMENTS constant
  last_workout_date  DateTime? // Used for streak calculations
  current_xp         Int       @default(0) // Current XP towards next level
  next_level_xp      Int       @default(1000) // XP needed for next level (BASE_XP * level^1.5)
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt

  // Reward rules and calculations defined in src/actions/achievements/rewards.ts:
  // - Points system (REWARD_POINTS constant)
  // - XP/Level progression (BASE_XP, getRequiredXPForLevel())
  // - Achievement/Badge unlocks (ACHIEVEMENTS constant)
  // See rewards.ts for full documentation

  @@index([user_id])
}

model completed_set {
  id                  String           @id @default(uuid())
  workout_exercise_id String
  workout_exercise    workout_exercise @relation(fields: [workout_exercise_id], references: [id])
  user_id             String
  user                user             @relation(fields: [user_id], references: [id])
  completed_reps      Int
  set_number          Int
  created_at          DateTime         @default(now())
  updated_at          DateTime         @updatedAt

  @@index([workout_exercise_id])
  @@index([user_id])
}

model testimonials {
  id         String   @id @default(uuid())
  name       String
  x_username String
  role       String
  content    String
  created_at DateTime @default(now())
}

model tester {
  id         String   @id @default(uuid())
  email      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
